# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { id: '123e4567-e89b-12d3-a456-426614174000',
      display_name: 'Display name',
      email: 'someone@example.com',
      account_name: 'new-account' }
  end

  let(:invalid_attributes) do
    { id: 'invalid excample',
      display_name: '',
      email: 'not+an+email+address',
      account_name: 'new-account' }
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create! valid_attributes
      passwordless_sign_in(user)
      get user_profile_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_user_url
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new User' do
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'creates a new Account' do
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(Account, :count).by(1)
      end

      it 'redirects to the sign in page' do
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(auth_sign_in_url)
      end

      context 'promotion funds' do
        context 'when the promotion is running' do
          around do |example|
            promo_running = ENV.fetch('PROMO_RUNNING', nil)
            promo_amount = ENV.fetch('PROMO_AMOUNT', nil)

            ENV['PROMO_RUNNING'] = 'true'
            ENV['PROMO_AMOUNT'] = '100'

            example.run

            ENV['PROMO_RUNNING'] = promo_running
            ENV['PROMO_AMOUNT'] = promo_amount
          end

          it 'applies the promotion funds on create' do
            post users_url, params: { user: valid_attributes }
            account = Account.order(created_at: :desc).first
            expect(account.balance).to eq 100
          end
        end

        context 'when the promotion is not running' do
          around do |example|
            promo_running = ENV.fetch('PROMO_RUNNING', nil)
            promo_amount = ENV.fetch('PROMO_AMOUNT', nil)

            ENV['PROMO_RUNNING'] = 'false'
            ENV['PROMO_AMOUNT'] = '100'

            example.run

            ENV['PROMO_RUNNING'] = promo_running
            ENV['PROMO_AMOUNT'] = promo_amount
          end

          it 'should not apply the promotion funds on create' do
            post users_url, params: { user: valid_attributes }
            account = Account.order(created_at: :desc).first
            expect(account.balance).to eq 0
          end
        end
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        expect do
          post users_url, params: { user: invalid_attributes }
        end.to change(User, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
